knitr::opts_chunk$set(echo = TRUE)
simulate_buffer_overflow <- function(){
capacidad_buffer = 100
dias = 0
paquetes_en_buffer = 0
while (paquetes_en_buffer <= capacidad_buffer) {
dias = dias + 1
dia_ocupado = sample(0:1, 1, prob = c(0.30, 0.7))
if(dia_ocupado == 0){
lam_llegadas = 15
}else{
lam_llegadas = 5
}
paquetes_llegados <- rpois(1, lam_llegadas)
lam_procesados <- 7
paquetes_procesados <- rpois(1,lam_procesados)
paquetes_en_buffer <- paquetes_en_buffer + paquetes_llegados - paquetes_procesados
if (paquetes_en_buffer < 0){
paquetes_en_buffer <-0
}
}
return(dias)
}
dias_hastaoverflow <- simulate_buffer_overflow()
sims = replicate(10000, simulate_buffer_overflow())
probs = sum(sims)/10000
dias_hastaoverflow
sims = replicate(10000, simulate_buffer_overflow())
sims
probs = sum(sims)/10000
probs
num_simulaciones = 10000
lambda = 1
set.seed(123)
maquina1 = rexp(num_simulaciones, lambda)
maquina2 = rexp(num_simulaciones, lambda)
maquina3 = rexp(num_simulaciones, lambda)
shutdown_sims = pmax(maquina1, maquina2, maquina3)
hist(shutdown_sims, probability = TRUE, breaks = 50,
main = "Distribución simulada de T_fallo",
xlab = "Tiempo hasta fallo del sistema")
curve(3 * (1 - exp(-x))^2 * exp(-x), col = "red", add = TRUE, lwd = 2)
num_simulaciones = 10000
lambda = 1
set.seed(123)
maquina1 = rexp(num_simulaciones, lambda)
maquina2 = rexp(num_simulaciones, lambda)
maquina3 = rexp(num_simulaciones, lambda)
shutdown_sims = pmax(maquina1, maquina2, maquina3)
hist(shutdown_sims, probability = TRUE, breaks = 50,
main = "Distribución simulada de T_fallo",
xlab = "Tiempo hasta fallo del sistema",
col = "lightblue", border = "white")
curve(3 * (1 - exp(-x))^2 * exp(-x), col = "red", add = TRUE, lwd = 2)
dev.flush()
legend("topright", legend = c("Densidad Teórica", "Simulación"),
col = c("red", "lightblue"), lwd = 2, pch = 15, pt.cex = 2, bty = "n")
num_simulaciones = 10000
lambda = 1
set.seed(123)
maquina1 = rexp(num_simulaciones, lambda)
maquina2 = rexp(num_simulaciones, lambda)
maquina3 = rexp(num_simulaciones, lambda)
shutdown_sims = pmax(maquina1, maquina2, maquina3)
shutdown_sims
f_theo <- function(t) {
ifelse(t >= 0, 3 * (1 - exp(-t))^2 * exp(-t), 0)
}
num_simulaciones <- 10000
lambda <- 1
maquina1 = rexp(num_Simulaciones, lambda)
num_simulaciones = 10000
lambda = 1
set.seed(123)
maquina1 = rexp(num_simulaciones, lambda)
maquina2 = rexp(num_simulaciones, lambda)
maquina3 = rexp(num_simulaciones, lambda)
shutdown_sims = pmax(maquina1, maquina2, maquina3)
hist(shutdown_sims, probability = TRUE, breaks = 50,
main = "Distribución simulada de T_fallo",
xlab = "Tiempo hasta fallo del sistema",
col = "lightblue", border = "white")
curve(3 * (1 - exp(-x))^2 * exp(-x), col = "red", add = TRUE, lwd = 2)
dev.flush()
legend("topright", legend = c("Densidad Teórica", "Simulación"),
col = c("red", "lightblue"), lwd = 2, pch = 15, pt.cex = 2, bty = "n")
num_simulaciones = 10000
lambda = 1
set.seed(123)
maquina1 = rexp(num_simulaciones, lambda)
maquina2 = rexp(num_simulaciones, lambda)
maquina3 = rexp(num_simulaciones, lambda)
shutdown_sims = pmax(maquina1, maquina2, maquina3)
hist(shutdown_sims, probability = TRUE, breaks = 50,
main = "Distribución simulada de T_fallo",
xlab = "Tiempo hasta fallo del sistema",
col = "lightblue", border = "white")
curve(3 * (1 - exp(-x))^2 * exp(-x), col = "red", add = TRUE, lwd = 2)
dev.flush()
legend("topright", legend = c("Densidad Teórica", "Simulación"),
col = c("red", "lightblue"), lwd = 2, pch = 15, pt.cex = 2, bty = "n")
f_theo <- function(t) {
ifelse(t >= 0, 3 * (1 - exp(-t))^2 * exp(-t), 0)
}
num_simulaciones <- 10000
lambda <- 1
maquina1 = rexp(num_Simulaciones, lambda)
maquina2 = rexp(num_Simulaciones, lambda)
maquina3 = rexp(num_Simulaciones, lambda)
shutdown_sims = pmax(maquina1, maquina2, maquina3)
f_theo <- function(t) {
ifelse(t >= 0, 3 * (1 - exp(-t))^2 * exp(-t), 0)
}
num_simulaciones <- 10000
lambda <- 1
maquina1 = rexp(num_simulaciones, lambda)
maquina2 = rexp(num_simulaciones, lambda)
maquina3 = rexp(num_simulaciones, lambda)
shutdown_sims = pmax(maquina1, maquina2, maquina3)
hist(shutdown_sims, probability = TRUE, breaks = 50,
main = "Distribución simulada de T_fallo",
xlab = "Tiempo hasta fallo del sistema",)
curve(f_densidad(x), from = 0, to = max(shutdown_sims),
col = "red", lwd = 2, add = TRUE)
f_theo <- function(t) {
ifelse(t >= 0, 3 * (1 - exp(-t))^2 * exp(-t), 0)
}
num_simulaciones <- 10000
lambda <- 1
maquina1 = rexp(num_simulaciones, lambda)
maquina2 = rexp(num_simulaciones, lambda)
maquina3 = rexp(num_simulaciones, lambda)
shutdown_sims = pmax(maquina1, maquina2, maquina3)
hist(shutdown_sims, probability = TRUE, breaks = 50,
main = "Distribución simulada de T_fallo",
xlab = "Tiempo hasta fallo del sistema",)
curve(f_theo(x), from = 0, to = max(shutdown_sims),
col = "red", lwd = 2, add = TRUE)
simulate_empty = function(n_serv, n_datablocks) {
asignar_servidores = sample(1:n_serv, n_datablocks, replace = TRUE)
contar_serv = table(asignar_servidores)
serv_vacios = n_serv - length(contar_serv)
return(serv_vacios)
}
n_serv = 10
n_datablocks = 20
simulate_empty(n_serv, n_datablocks)
n_serv <- 10
n_datablocks <- 7
num_simulations <- 10000
resultados <- replicate(num_simulations, simulate_empty(n_serv, n_datablocks))
Tabla <- table(resultados) / num_simulations
print(Tabla)
distribution_empty = function(n_servers, n_datablocks, n_sims) {
simulate_empty = function(n_servers, n_datablocks) {
assigned_servers = sample(1:n_servers, n_datablocks, replace = TRUE)
server_counts = table(assigned_servers)
empty_servers = n_servers - length(server_counts)
return(empty_servers)
}
results = replicate(n_sims, simulate_empty(n_servers, n_datablocks))
freq_table = table(results) / n_sims
prob_distribution = as.data.frame(freq_table)
colnames(prob_distribution) = c("E (Empty Servers)", "Probability")
return(prob_distribution)
}
n_servers <- 10
n_datablocks <- 7
n_sims <- 10000
distribution <- distribution_empty(n_servers, n_datablocks, n_sims)
print(distribution)
n_servers <- 5
n_datablocks <- 13
n_sims <- 10000
distribution <- distribution_empty(n_servers, n_datablocks, n_sims)
library(ggplot2)
ggplot(distribution, aes(x = `E (Empty Servers)`, y = Probability)) +
geom_bar(stat = "identity", fill = "lightblue", color = "black") +
labs(title = "Distribución de Probabilidad de Servidores Vacíos",
subtitle = "13 bloques de datos distribuidos en 5 servidores",
x = "Número de servidores vacíos (E)", y = "Probabilidad") +
theme_minimal()
simulate_empty = function(n_serv, n_datablocks) {
asignar_servidores = sample(1:n_serv, n_datablocks, replace = TRUE)
contar_serv = table(asignar_servidores)
serv_vacios = n_serv - length(contar_serv)
serv_vacios
}
n_serv = 10
n_datablocks = 20
simulate_empty(n_serv, n_datablocks)
d = rpois(n_sims, 10)
h = rbinom(n_sims, d, 0.6)
e_high = mapply(function(h){
if(h>0){
sum(rnorm(h, mean = 6, sd = 0.75))
}else{
0
}
})
}
simulate_all = function(n_sims){
d = rpois(n_sims, lambda = 10)
h = rbinom(n_sims, size = d, prob =0.6)
e_high = mapply(function(h){
if(h>0){
sum(rnorm(h, mean = 6, sd = 0.75))
}else{
0
}
}, h)
d_normal = d - h
e_normal = mapply(function(dn){
if (dn > 0){
sum(rnorm(dn, mean = 4, sd =0.75))
} else {
0
}
}, d_normal)
e = e_high + e_normal
resultados = cbind(d, h, e)
colnames(resultados) = c("d", "h", "e")
return(resultados)
}
resultados
View(simulate_all)
View(simulate_all)
View(simulate_all)
View(simulate_all)
View(simulate_all)
View(simulate_all)
simulate_all = function(n_sims){
d = rpois(n_sims, 10)
h = rbinom(n_sims, d, 0.6)
e_high = mapply(function(h){
if(h>0){
sum(rnorm(h, 6, 0.75))
}else{
0
}
}, h)
d_normal = d - h
e_normal = mapply(function(dn){
if (dn > 0){
sum(rnorm(dn, 4, 0.75))
} else {
0
}
}, d_normal)
e = e_high + e_normal
resultados = cbind(d, h, e)
colnames(resultados) = c("d", "h", "e")
return(resultados)
}
resultados
simulate_all = function(n_sims){
d = rpois(n_sims, 10)
h = rbinom(n_sims, d, 0.6)
e_high = mapply(function(h){
if(h>0){
sum(rnorm(h, 6, 0.75))
}else{
0
}
}, h)
d_normal = d - h
e_normal = mapply(function(dn){
if (dn > 0){
sum(rnorm(dn, 4, 0.75))
} else {
0
}
}, d_normal)
e = e_high + e_normal
resultados = cbind(d, h, e)
colnames(resultados) = c("d", "h", "e")
return(resultados)
}
resultados
sim_h_e = function(n_sims){
d = rpois(n_sims, 10)
h = rbinom(n_sims, d, 0.6)
e_high = mapply(function(h){
if(h>0){
sum(rnorm(h, 6, 0.75))
}else{
0
}
}, h)
d_normal = d - h
e_normal = mapply(function(dn){
if (dn > 0){
sum(rnorm(dn, 4, 0.75))
} else {
0
}
}, d_normal)
e = e_high + e_normal
resultados2 = cbind(h, e)
colnames(resultados2) = c("h", "e")
return(resultados2¨)
sim_h_e = function(n_sims){
d = rpois(n_sims, 10)
h = rbinom(n_sims, d, 0.6)
e_high = mapply(function(h){
if(h>0){
sum(rnorm(h, 6, 0.75))
}else{
0
}
}, h)
d_normal = d - h
e_normal = mapply(function(dn){
if (dn > 0){
sum(rnorm(dn, 4, 0.75))
} else {
0
}
}, d_normal)
e = e_high + e_normal
resultados2 = cbind(h, e)
colnames(resultados2) = c("h", "e")
return(resultados2)
}
resultados 2
resultados2
View(sim_h_e)
View(sim_h_e)
View(sim_h_e)
View(sim_h_e)
View(sim_h_e)
View(sim_h_e)
View(sim_h_e)
View(sim_h_e)
simulate_buffer_overflow <- function(){
capacidad_buffer = 100
dias = 0
paquetes_en_buffer = 0
while (paquetes_en_buffer <= capacidad_buffer) {
dias = dias + 1
dia_ocupado = sample(0:1, 1, prob = c(0.30, 0.7))
if(dia_ocupado == 0){
lam_llegadas = 15
}else{
lam_llegadas = 5
}
paquetes_llegados <- rpois(1, lam_llegadas)
lam_procesados <- 7
paquetes_procesados <- rpois(1,lam_procesados)
paquetes_en_buffer <- paquetes_en_buffer + paquetes_llegados - paquetes_procesados
if (paquetes_en_buffer < 0){
paquetes_en_buffer <-0
}
}
return(dias)
}
dias_hastaoverflow <- simulate_buffer_overflow()
sims = replicate(10000, simulate_buffer_overflow())
probs = sum(sims)/10000
sim_h_e = function(n_sims){
d = rpois(n_sims, 10)
h = rbinom(n_sims, d, 0.6)
e_high = mapply(function(h){
if(h>0){
sum(rnorm(h, 6, 0.75))
}else{
0
}
}, h)
d_normal = d - h
e_normal = mapply(function(dn){
if (dn > 0){
sum(rnorm(dn, 4, 0.75))
} else {
0
}
}, d_normal)
e = e_high + e_normal
resultados2 = cbind(h, e)
colnames(resultados2) = c("h", "e")
return(resultados2)
}
resultados2
resultados
sim_h_e = function(n_sims){
d = rpois(n_sims, 10)
h = rbinom(n_sims, d, 0.6)
e_high = mapply(function(h){
if(h>0){
sum(rnorm(h, 6, 0.75))
}else{
0
}
}, h)
d_normal = d - h
e_normal = mapply(function(dn){
if (dn > 0){
sum(rnorm(dn, 4, 0.75))
} else {
0
}
}, d_normal)
e = e_high + e_normal
resultados = cbind(h, e)
colnames(resultados) = c("h", "e")
return(resultados)
}
resultados
